name: Full Stack App CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: myapp
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: yourpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:yourpassword@localhost:5432/myapp
      PGUSER: postgres
      PGPASSWORD: yourpassword
      PGHOST: localhost
      PGPORT: 5432
      PGDATABASE: myapp

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # FRONTEND
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      # BACKEND
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Create users table
        run: |
          psql -h localhost -U postgres -d myapp -c "
            CREATE TABLE IF NOT EXISTS users (
              id SERIAL PRIMARY KEY,
              name TEXT NOT NULL,
              email TEXT NOT NULL
            );
          "

      - name: Run backend tests
        working-directory: ./backend
        run: npm test

      # OPTIONAL: Upload frontend build as artifact
      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

      # DEPLOY PLACEHOLDER
      - name: Deploy backend
        run: echo "Deploy backend here with SSH, GitHub Deployments, or cloud CLI"

      - name: Deploy frontend
        run: echo "Deploy frontend here (e.g., to Vercel, Netlify, GCP)"

